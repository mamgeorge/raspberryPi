\\5Personal\Technology\raspberryPi\docs\sound.txt

terminology [

	ADC		Analog to Digital Converter
	ALSA	Advanced Linux Sound Architecture; uses hardware driver snd_bcm2835
	DAC		Digital to Analog Converter
	DTB		Device Tree Blob; instantiates optional external interfaces ( I2C , I2S , SPI ):
	DTO		Device Tree Overlay
	I2C		Inter-Integrated-Circuit (aka "I squared C") for chips on a single PCB, it is half-duplex ( one direction ) with two lines: SDA for data and SCL for clock, it can handle multiple slaves.
	I2S		Inter-IC Sound (aka Integrated Interchip Sound, IIS) for audio serial bus protocol, it is used to communicate PCM data between devices, it is common for audio in phones & tablets. the main PCM types are hw & plughw; hw: opens PCM devices directly with parameters required by the application / plughw: used for activating the plug-in layer / format for PCM devices is: PCM type , card number, device number, for example, plughw:0,0.
	LKM		Loadable Kernel Module
	PCM		Pulse Code Modulation
	SPI		Serial Peripheral Interface; for faster, synchronous ( clocked ) protocol, it is full duplex ( send and receive ) with master-slave architecture, It has good signal integrity , and fast.
]

initial [ espeak

	see: "\\5Personal\Technology\raspberryPi\docs\bluetooth.txt"

	// probably ok already
	$ sudo dpkg -l | grep -i  xxx	// dpkg -l | grep -i "ii  sql"
	$ sudo apt-get update -y
	$ sudo apt-get upgrade -y
	$ sudo apt-get install espeak python-espeak -y
	$ sudo apt-get install alsa-utils -y
]

testing [ alsamixer arecord aplay

	// physical setup
	$ sudo alsamixer
	$ alsamixer									// use this to set speaker values

	$ speaker-test -c2							// test audio , white noise
	$ speaker-test -c2 -D plughw:1,0			// test audio : PCM type , card number, device number
	$ speaker-test -t wav -c2					// test audio , speech
	$ speaker-test -t wav -c2 -D plughw:1,0		// test audio , speech, specifying outputs
	$ espeak "Hello, World!"

	// record
	$ arecord -l								// shows webcam list; that is an "L"
	$ arecord -d 3 test.wav						// -d 3 means duration 3 seconds
	$ arecord -d 3 -D plughw:1,0 test.wav		// create test sound for 3 seconds
	$ arecord -D plughw:1,0 test.wav			// -D means associate to device "plughw:1,0"
	$ aplay test.wav							// play test wav, if sound card installed

		https://linux.die.net/man/1/arecord
		-c, --channels=#	The number of channels.
		-r, --rate=#<Hz>	Sampling rate in Hertz.
		-d, --duration=#	Interrupt after # seconds; 0 means infinity.
		-t, --file-type TYPE	File type (voc, wav, raw or au); defaults to wav

	// playback
	$ aplay -l										// lists devices
	$ aplay mamgeorge/sound/ping.wav				// play test wav, if sound card installed
	$ aplay -D bluealsa mamgeorge/sound/ping.wav	// play test wav, if device bluealsa installed
	$ aplay -D bluealsa:HCI=hci0,DEV=xx:xx:xx:xx:xx:xx,PROFILE=a2dp mamgeorge/sound/ping.wav
]

tts [ espeak flite festival google pyttsx

	https://elinux.org/RPi_Text_to_Speech_(Speech_Synthesis)

		$ espeak "Hello, World!"
		$ date +"%Y-%m-%d %I:%M:%S%p" | espeak
		$ flite -t "Hello, World!"
		$ echo "Hello, World!" | festival --tts
		$ ./speech.sh "Hello, World!"
		
		$ dated=$(date +"%Y-%m-%d_%I:%M:%S%p")
		$ ./speech.sh $dated
		
		$ espeak -f robots.txt
		$ flite -f robots.txt
		$ festival --tts robots.txt

		$ sed -n '5,10p;10q' robots.txt | espeak
		$ sed -n '5,10p;10q' robots.txt | flite
		$ sed -n '5,10p;10q' robots.txt | festival --tts
		
		$ ./speech.sh (sed -n '5,10p;10q' robots.txt)

	tts espeak [ v1.48.03  04.Mar.14 (voices date sed python)

		// eSpeak --version		( text-to-speech: 1.48.03  04.Mar.14 )
			-f <text file>	Speaks a text file.
			-a <integer> Sets amplitude (volume) in a range of 0 to 200. The default is 100.
			-p <integer> Adjusts the pitch in a range of 0 to 99. The default is 50.
			-s <integer> Sets the speed in words-per-minute. The default is 180.
			-k <integer> Indicate words which begin with capital letters. Try -k5
			-v <voice filename>[+<variant>] Sets a Voice
			-w <wave file> Writes to WAV format
			--version

		$ sudo apt-get install espeak python-espeak
		$ espeak --voices

		$ espeak "Hello, World!" // v: voice, m: male, p: pitch, s: speed wpm, a: amplitude, k: capitals
		$ espeak "Hello, World!" -ven-us+m3 -p50 -k5 -s180 -a50 --stdout | aplay -f cd -D bluealsa
		$ espeak "Hello, World!" -stdout | aplay -f cd -D bluealsa
		$ espeak -ven+m3 -k5 -s150 -a50 "Hello, World!"
		$ espeak "Hello. My name is Matt!"
		$ espeak "Hello. My name is Matt!" -stdout | aplay -f cd -D bluealsa
		$ espeak "Hello. My name is Matt!" -a10 --stdout | aplay -f cd -D bluealsa
		$ espeak "Hello. My name is Matt!" -ven-us+m3 -p50 -k5 -s180 -a20 --stdout | aplay -f cd -D bluealsa
		$ espeak -f rom_12.txt
		$ espeak -f rom_12.txt -ven-us+m5 -p50 -k5 -s180 -a10 --stdout | aplay -f cd -D bluealsa
		$ espeak -m -vzh 'ni3 hao3. <break strength = "strong" /> wo3 shi4 qiao2 ma3 ding1!'

		$ date +"%Y-%m-%d %I:%M:%S%p" | espeak
		$ date +"date... %Y...%m...%d... time... %I...%M...%S...%p" | espeak
		$ date '+year %Y month %m date %d <break strength = "strong" /> time %I:%M:%S%p' | espeak -m -ven+f5
		$ date '+year %Y month %m date %d <break strength = "strong" /> time %I:%M:%S%p' | espeak -m -ven-us+m3 -p50 -k5 -s180 -a50
		$ date '+year %Y month %m date %d <break strength = "strong" /> time %I:%M:%S%p' | espeak -m -ven-us+m3 -p50 -k5 -s180 -a50 --stdout | aplay -f cd -D bluealsa
		$ date 'date: %Y/%m/%d <break strength = "strong" /> time: %I:%M:%S%p' | espeak -m -ven-us+m3 -p50 -k5 -s180 -a50 --stdout | aplay -f cd -D bluealsa

	// special

		$ sudo nano sample.py
			#! /usr/bin/env python
			from subprocess import call
			call( [ ‘espeak "Pi initialized. Hello, World!"’ ] , shell=True )

		os.system( "espeak 'Hello {}' --stdout | aplay -f cd -D bluealsa".format( insertVal ) )		// python
]

	tts flite [ v2.1-release-3

		$ sudo apt-get install flite -y
		$ flite -lv

		$ flite -t "Hello, World!"
		$ flite -f anySpeech.txt

		$ date "+%Y %m %d , %B %A , %H:%M %P" | flite
	]

	tts festival [ v2.5.0:release December 2017

		$ sudo apt-get install festival -y

		$ echo "Hello, World!" | festival --tts

		$ date +"date %Y %m %d, time %I %M %S %p" | festival --tts

		$ festival --tts anySpeech.txt

		$ hostname -I | festival --tts
	]

	tts inet google [ uses mplayer

		/* https://elinux.org/RPi_Text_to_Speech_(Speech_Synthesis)

			http://translate.google.com/translate_tts
				?ie		=UTF-8
				&client	=tw-ob
				&tl		=en
				&q		=$*
		*/

		$ sudo apt-get install mplayer -y

		$ sudo nano speech.sh // CREATE SPEECH FILE; CANNOT BE COPIED FROM DOS

			#!/bin/bash
			link="http://translate.google.com/translate_tts?ie=UTF-8&client=tw-ob&tl=en&q=$*"
			say( ) {
				local IFS=+;/usr/bin/mplayer -ao alsa -really-quiet -noconsolecontrols $link
			}
			say $*

		$ sudo chmod 777 speech.sh

		$ ./speech.sh "Hello, World!"
	]

	pyttsx ( Python text-to-speech library ) [

		$ wget https://pypi.python.org/packages/source/p/pyttsx/pyttsx-1.1.tar.gz
		$ gunzip pyttsx-1.1.tar.gz
		$ tar -xf pyttsx-1.1.tar
		$ cd pyttsx-1.1/
		$ sudo python setup.py install
	]
]

configs [ raspi lsusb dmesg

	$ sudo raspi-config > Advanced Options > Audio > Auto

	$ lsusb									// shows connected usb devices
	$ dmesg | grep Headphone				// means you have a CM-headphone chipset with a C-Media USB Headphone Set Driver
	$ dmesg | grep cm109					// means you have a CM109 chipset , with a CM109 Phone Interface Driver
	$ dmesg | grep C-Media					// means you have a CM108 chipset , this worked on RPI0
	$ dmesg | grep General					// means you have a GeneralPlus chipset

	$ cat /proc/asound/cards				// shows cards
	$ cat /proc/asound/modules				// shows modules

	$ sudo nano /boot/config.txt			// may need dtparam=i2s=on ;#dtparam=audio=on blocks snd_bcm2835?
	$ sudo nano /etc/modules				// may need snd_bcm2835, may have "i2c-dev"
	$ sudo nano /usr/share/alsa/alsa.conf	// defaults.ctl.card 1...

	$ sudo modprobe bcm2835-v4l2			// uses "L" not "1" ; probably loaded by default; may have "i2c-dev"
	$ sudo modprobe snd_bcm2835

		// the hardware driver snd_bcm2835 is a LKM ( Loadable Kernel Module )
		// it abstracts the audio I/O from the Broadcom 2835 SOC
		// it is used by ALSA ( Advanced Linux Sound Architecture )
		// modprobe is a Linux program used to add or remove an LKM to the Linux kernel

	$ jack_control start						// error issue
]

circuit [ uses circuit with GPIO pins

	https://www.raspberrypi.org/blog/tinkernut-diy-pi-zero-audio/
	https://learn.adafruit.com/adding-basic-lsaudio-ouput-to-raspberry-pi-zero/pi-zero-pwm-audio
	http://shallowsky.com/blog/hardware/pi-zero-audio.html
	https://theraspberryblonde.wordpress.com/2016/09/01/add-sound-to-your-pi-zero/

		1 two 270 ohm resistors
		2 two 150 ohm resistors
		3 two 1µF ( or 10µF ) electrolytic capacitors
		4 two 10 nF ( or 0.01 µf or 33nF ) polyester film capacitors
		5 3.5mm headphone jack

	$ sudo nano /boot/config.txt

		//Enabling PWM audio through DTO ( device tree overlay )
		dtoverlay=pwm-2chan , pin=18 , func=2pin2=13 , func2=4

		//Enable audio ( loads snd_bcm2835 )
		dtparam=audio=on

	$ sudo raspi-config > Advanced Options > Audio > Headphone
]

VAC [ Voice Activated commands

	https://www.techradar.com/how-to/how-to-control-the-raspberry-pi-with-your-voice
	https://maker.pro/raspberry-pi/tutorial/the-best-voice-recognition-software-for-raspberry-pi

	https://www.instructables.com/id/Voice-Activated-Google-Assistant-for-Raspberry-Pi/
	https://raspberrypi.stackexchange.com/questions/67715/perform-a-task-upon-a-voice-command

	USB microphone

		or webcam with builtin microphone
		or microphone and AudioCard

	raspberry pi speech recognition programs

		online: Google Assistants API
		RPi Voice Recognition by Oscar Liang
		PocketSphinx , CMUSphinx
		Jasper

	online: Google Assistants API [

		https://console.cloud.google.com/project

			pivoice
			goto API manager add Google Assistant
			goto Credentials
				487210436028-39dtnaadikgp05tsh32445mdr9j5t8tg.apps.googleusercontent.com
				GJNri2jNIAZlJYIx2irqWdue

		https://myaccount.google.com/activitycontrols

			turn on: web , location , device , voice

		updates

			sudo apt-get install python3-dev python3-venv
			python3 -m venv env
			env/bin/python -m pip install --upgrade pip setuptools
			source env/bin/activate

			python -m pip install https://github.com/googlesamples/assistant-sdk-python/releases/download/0.3.0/google_assistant_library-0.0.2-py2.py3-none-linux_armv7l.whl
			python -m pip install –upgrade google-auth-oauthlib[tool]
			google-oauthlib-tool –client-secrets /home/pi/Downloads/client_secret_client-id487210436028.json –scope https://www.googleapis.com/auth/assistant-sdk-prototype –save –headless

			ERROR
	]

	RPi Voice Control by Steven Hickson [

		-
	]
]

ERRORS [

	ERROR [ raspberry pi usb microphone not recording

		$ aplay mamgeorge/sound/ping.wav
		$ arecord -l
		$ arecord -d 3 -D plughw:1,0 test.wav	// have to hover over it

		$ amixer -c 1 set Master 95%			// no GUI; c: channel

		$ sudo alsamixer

			F6 selected sound card
				x default
				x0 bcm2835 Headphones
				x1 USB PnP Sound device <--select

			F5 Item
			
			tab to device; arrows to raise sound

		$ aplay test.wav

		// usb mic required hovering over it
		// webcam got better sound
		
			device: webcam ( logitech c170 using fswebcam or arecord/omxplayer )

			$40 Logitech C270 3MP 1280 x 720pixels USB 2.0 Black Webcam
			$36 Logitech C310 HD Webcam, Standard Packaging - Black
			$70 Logitech C920x Pro HD Webcam
			$40 NexiGo N60 1080P HD Webcam with Microphone, Privacy Cover
	]

	ERROR [ ALSA lib pcm.c:2495:(snd_pcm_open_noupdate) Unknown PCM cards.pcm.xxxx

		ALSA lib pcm.c:2495:(snd_pcm_open_noupdate) Unknown PCM cards.pcm.rear
		ALSA lib pcm.c:2495:(snd_pcm_open_noupdate) Unknown PCM cards.pcm.center_lfe
		ALSA lib pcm.c:2495:(snd_pcm_open_noupdate) Unknown PCM cards.pcm.side
		ALSA lib pcm.c:2495:(snd_pcm_open_noupdate) Unknown PCM cards.pcm.hdmi
		ALSA lib pcm.c:2495:(snd_pcm_open_noupdate) Unknown PCM cards.pcm.modem
		ALSA lib pcm.c:2495:(snd_pcm_open_noupdate) Unknown PCM cards.pcm.phoneline

		ALSA lib pcm.c:2565:(snd_pcm_open_noupdate) Unknown PCM cards.pcm.surround21
		ALSA lib pcm.c:2565:(snd_pcm_open_noupdate) Unknown PCM cards.pcm.surround40
		ALSA lib pcm.c:2565:(snd_pcm_open_noupdate) Unknown PCM cards.pcm.surround41
		ALSA lib pcm.c:2565:(snd_pcm_open_noupdate) Unknown PCM cards.pcm.surround50
		ALSA lib pcm.c:2565:(snd_pcm_open_noupdate) Unknown PCM cards.pcm.surround51
		ALSA lib pcm.c:2565:(snd_pcm_open_noupdate) Unknown PCM cards.pcm.surround71
		ALSA lib pcm.c:2565:(snd_pcm_open_noupdate) Unknown PCM cards.pcm.iec958

		RESOLUTION ?

			see changes above for "/etc/asound.conf" & "/usr/share/alsa/alsa.conf"

			unknown PCM cards are removed by commenting out relevant lines

				or, changing

					pcm.front cards.pcm.front
					pcm.front cards.pcm.default

				or , suppress error message

					cards.pcm.front 1

				or , comment out
	]

	ERROR [ jack server is not running or cannot be started

		RESOLUTION
			$ jack_control start
	]
]
----
